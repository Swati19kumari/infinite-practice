package com.java.oops;

import java.util.Arrays;

class Box{
	int value;
}

class Example{
	public static void modifys(Box b) {
		//b=new Box();//new object 
		b.value=999;
		System.out.println("Inside the method "+b.value);
	}
	public static void modifyse(StringBuilder sb) {
		 sb=new StringBuilder("New");
		sb.append("World");
		
	}
}

public class CallValueAndRef extends Example {

	
	public static void changeValue(int x) {
		x=50;
		
		System.out.println("Inside method "+ x);
	}
	
	//Call by reference (Array)
	public static void modify(int[] arr) {
		
		//arr[0]=99;
		arr=new int[]{7,8,9}; //reassign the ref (local only) 
		System.out.println("Inside the method "+Arrays.toString(arr));
	}
	
	
	
	
	public static void main(String[] args) {
		
		//in primitives no changes it is call by value
		int num=10;
		System.out.println("Before method call "+ num);;
		changeValue(num);
		System.out.println("After method call "+ num);
		
		//Call by reference by taking Object reference Arrays
		//reassign object won't reflect in the main
		int[] numbers= {1,2,3};
		 System.out.println("before method call "+ Arrays.toString(numbers));
		 modify(numbers);
		 System.out.println("After method call " + Arrays.toString(numbers));
		
		 // Call by value with custom object 
		 Box box=new Box();
		 box.value=100;
		 System.out.println("Before method call "+box.value);
		 modifys(box);
		 System.out.println("After method call "+box.value);// no changes relect if we assign new object
		 
		 //Call by String value
		 StringBuilder str=new StringBuilder("Hello");
		 modifyse(str);
		 System.out.println("After method call "+str);
	}
	
}
